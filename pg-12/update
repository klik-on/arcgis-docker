https://www.worldlink.com.cn/zh_cn/osdir/bitnami-docker-postgresql.html
https://github.com/bitnami/containers/tree/main/bitnami/postgresql/12/debian-11
$ svn ls https://github.com/bitnami/containers/
branches/
trunk/

$ svn ls https://github.com/bitnami/containers/trunk/bitnami/postgresql/12/debian-11/
$ svn co https://github.com/bitnami/containers/trunk/bitnami/postgresql/12/debian-11

$ cp ../../debian-11/docker-compose.yml .
$ cp -r ../../debian-11/rootfs/opt/bitnami/postgresql rootfs/opt/bitnami/
$ docker-compose up -d

With Docker Compose the master-slave replication with synchronous commits can be setup as follows:
version: '2'

services:
  postgresql-master:
    image: 'bitnami/postgresql:latest'
    ports:
      - '5432'
    volumes:
      - 'postgresql_master_data:/bitnami/postgresql'
    environment:
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_USERNAME=my_user
      - POSTGRESQL_PASSWORD=my_password
      - POSTGRESQL_DATABASE=my_database
      - POSTGRESQL_SYNCHRONOUS_COMMIT_MODE=on
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=1
    volumes:
      - '/path/to/postgresql-persistence:/bitnami/postgresql'
  postgresql-slave:
    image: 'bitnami/postgresql:latest'
    ports:
      - '5432'
    depends_on:
      - postgresql-master
    environment:
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_MASTER_HOST=postgresql-master
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
  postgresql-slave2:
    image: 'bitnami/postgresql:latest'
    ports:
      - '5432'
    depends_on:
      - postgresql-master
    environment:
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_MASTER_HOST=postgresql-master
      - POSTGRESQL_MASTER_PORT_NUMBER=5432

postgres=# select application_name as server, state,
postgres-#       sync_priority as priority, sync_state
postgres-#       from pg_stat_replication;
   server, state, priority, sync_state
-------------, -----------, ----------, ------------
 walreceiver, streaming, sync
 walreceiver, streaming, async
