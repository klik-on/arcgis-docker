-- cek Index sudah ada atau belum digunakan Untuk Mempercepat Proeses
SELECT indexname
FROM pg_indexes
WHERE tablename = 'LAHAN_KRITIS_AR_50K_291124';
-- output : kalau sudah ada
-- indexxname
-- lahan_kritis_ar_50k_291124_pkey
-- lahan_kritis_ar_50k_291124_geom_geom_idx
Kalau beluma ada buat
-- Index ini mempercepat operasi spasial seperti ST_Transform dan kalkulasi area.
CREATE INDEX IF NOT EXISTS idx_kwshutan_geom ON "LAHAN_KRITIS_AR_50K_291124" USING GIST(geom);


-- Cek Valid geometri, pastikan semua geometri valid: Data count 0
SELECT COUNT(*) FROM "KWSHUTAN_AR_250K" WHERE NOT ST_IsValid(geom);

-- Jiks Data count  belum 0
-- Gunakan ST_CollectionExtract() untuk mengeluarkan bagian Polygon atau MultiPolygon dari hasil ST_MakeValid():
-- CEK dan Perbaiki Valid GEOM
UPDATE datagis."KWSHUTAN_AR_250K"
SET geom = ST_Multi(ST_CollectionExtract(ST_MakeValid(geom), 3))  -- 3 = Polygon
WHERE NOT ST_IsValid(geom);

-- Cek Valid geometri, pastikan semua geometri valid: Data count 0
SELECT COUNT(*) FROM pdatagis."KWSHUTAN_AR_250K" WHERE NOT ST_IsValid(geom);

-- CEK  pastikan semua bertipe MultiPolygon
SELECT DISTINCT GeometryType(geom) FROM datagis."KWSHUTAN_AR_250K";
-- Setelah update, pastikan semua geometri valid:
SELECT COUNT(*) FROM "LAHAN_KRITIS_AR_50K_291124" WHERE NOT ST_IsValid(geom);

-- Cek Overlap data
SELECT 
    a.id AS id1,
    b.id AS id2,
    ST_Intersection(a.geom, b.geom) AS geom_overlap
FROM datagis.rumpin_overlap a
JOIN datagis.rumpin_overlap b
  ON ST_Overlaps(a.geom, b.geom)
WHERE a.id < b.id;


