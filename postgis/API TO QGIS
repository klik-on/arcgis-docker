-- Contoh TYPE Data geometry
import requests
import json
import os
from qgis.core import QgsVectorLayer, QgsProject

# === Konfigurasi ===
url = "http://172.16.2.122:8000/rest/v1/AMDAL_AR_50K?select=*"

headers = {
    "apikey": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlIiwiaWF0IjoxNzUxMzAyODAwLCJleHAiOjE5MDkwNjkyMDB9.5B3KqroqKZUnXyjJg99AtjSjGci-wKqJtH7LWCz7x2U",  # potong demi keamanan
    "Authorization": Bearer "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlIiwiaWF0IjoxNzUxMzAyODAwLCJleHAiOjE5MDkwNjkyMDB9.5B3KqroqKZUnXyjJg99AtjSjGci-wKqJtH7LWCz7x2U"
}

# === Ambil data dari Supabase ===
response = requests.get(url, headers=headers)
if response.status_code != 200:
    raise Exception(f"Gagal ambil data dari API: {response.status_code} - {response.text}")

data = response.json()

# === Konversi ke GeoJSON FeatureCollection ===
geojson = {
    "type": "FeatureCollection",
    "features": []
}

for row in data:
    geom = row.get("geometry")  # ganti kalau nama kolom berbeda, misalnya 'st_asgeojson'
    if isinstance(geom, str):
        try:
            geom = json.loads(geom)  # parse string ke dict
        except Exception as e:
            print("❌ Gagal parsing geometry:", e)
            continue

    if not isinstance(geom, dict) or "type" not in geom or "coordinates" not in geom:
        print("❌ Geometry tidak valid:", geom)
        continue

    # Buat feature GeoJSON
    feature = {
        "type": "Feature",
        "geometry": geom,  # bisa MultiPolygon, Polygon, dsb
        "properties": {k: v for k, v in row.items() if k != "geometry"}
    }
    geojson["features"].append(feature)

# === Simpan ke file sementara ===
geojson_path = os.path.join(os.path.expanduser("~"), "qgis_supabase.geojson")
with open(geojson_path, "w") as f:
    json.dump(geojson, f)

# === Tambahkan ke QGIS ===
layer = QgsVectorLayer(geojson_path, "AMDAL_AR_50K Supabase", "ogr")
if not layer.isValid():
    raise Exception("❌ Layer tidak valid. Cek struktur GeoJSON dan geometri.")

QgsProject.instance().addMapLayer(layer)
print("✅ Layer MultiPolygon berhasil ditambahkan ke QGIS!")



-- Contoh TYPE Data geom
import requests
import json
import os
from qgis.core import QgsVectorLayer, QgsProject

# === Konfigurasi ===
url = "http://172.16.2.122:8000/rest/v1/RUMPIN?select=*"

headers = {
    "apikey": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlIiwiaWF0IjoxNzUxMzAyODAwLCJleHAiOjE5MDkwNjkyMDB9.5B3KqroqKZUnXyjJg99AtjSjGci-wKqJtH7LWCz7x2U",  # potong demi keamanan
    "Authorization": Bearer "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlIiwiaWF0IjoxNzUxMzAyODAwLCJleHAiOjE5MDkwNjkyMDB9.5B3KqroqKZUnXyjJg99AtjSjGci-wKqJtH7LWCz7x2U"
}

# === Ambil data dari Supabase ===
response = requests.get(url, headers=headers)
if response.status_code != 200:
    raise Exception(f"Gagal ambil data dari API: {response.status_code} - {response.text}")

data = response.json()

# === Konversi ke GeoJSON FeatureCollection ===
geojson = {
    "type": "FeatureCollection",
    "features": []
}

for row in data:
    geom = row.get("geom")  # ganti kalau nama kolom berbeda, misalnya 'st_asgeojson'
    if isinstance(geom, str):
        try:
            geom = json.loads(geom)  # parse string ke dict
        except Exception as e:
            print("❌ Gagal parsing geometry:", e)
            continue

    if not isinstance(geom, dict) or "type" not in geom or "coordinates" not in geom:
        print("❌ Geometry tidak valid:", geom)
        continue

    # Buat feature GeoJSON
    feature = {
        "type": "Feature",
        "geometry": geom,  # bisa MultiPolygon, Polygon, dsb
        "properties": {k: v for k, v in row.items() if k != "geometry"}
    }
    geojson["features"].append(feature)

# === Simpan ke file sementara ===
geojson_path = os.path.join(os.path.expanduser("~"), "rumpin_supabase.geojson")
with open(geojson_path, "w") as f:
    json.dump(geojson, f)

# === Tambahkan ke QGIS ===
layer = QgsVectorLayer(geojson_path, "RUMPIN Supabase", "ogr")
if not layer.isValid():
    raise Exception("❌ Layer tidak valid. Cek struktur GeoJSON dan geometri.")

QgsProject.instance().addMapLayer(layer)
print("✅ Layer MultiPolygon berhasil ditambahkan ke QGIS!")


--- Proxy
import requests
import json
import os
from qgis.core import QgsVectorLayer, QgsProject
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# === Konfigurasi ===
url = "https://dbgis.menlhk.go.id/supabase-proxy/api/ADDENDUM_ANDAL_RKL_RPL_AR_50K?select=*"  ### Contoh Query

headers = {}

# === Ambil data dari Supabase ===
response = requests.get(url, headers=headers, verify=False)
if response.status_code != 200:
    raise Exception(f"Gagal ambil data dari API: {response.status_code} - {response.text}")

data = response.json()

# === Konversi ke GeoJSON FeatureCollection ===
geojson = {
    "type": "FeatureCollection",
    "features": []
}

for row in data:
    # Pastikan nama field sesuai dengan data asli dari API
    geom = row.get("geometry") or row.get("geom")  # bisa salah satu tergantung API

    if isinstance(geom, str):
        try:
            geom = json.loads(geom)  # Parse string JSON ke Python dict
        except Exception as e:
            print("❌ Gagal parsing geometry:", e)
            continue

    if not isinstance(geom, dict) or "type" not in geom or "coordinates" not in geom:
        print("❌ Geometry tidak valid:", geom)
        continue

    feature = {
        "type": "Feature",
        "geometry": geom,
        "properties": {k: v for k, v in row.items() if k not in ["geom", "geometry"]}
    }
    geojson["features"].append(feature)

# === Simpan ke file GeoJSON sementara ===
geojson_path = os.path.join(os.path.expanduser("~"), "data_supabase.geojson")
with open(geojson_path, "w") as f:
    json.dump(geojson, f)

# === Tambahkan ke QGIS ===
layer = QgsVectorLayer(geojson_path, "ADDENDUM_ANDAL_RKL_RPL_AR_50K", "ogr")

if not layer.isValid():
    raise Exception("❌ Layer tidak valid. Cek struktur GeoJSON dan geometri.")

QgsProject.instance().addMapLayer(layer)
print("✅ Layer berhasil ditambahkan ke QGIS!")



-- Query Menggunakan PILIHAN
import requests
import json
import os
from qgis.core import QgsVectorLayer, QgsProject
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# === Konfigurasi ===
# url = "https://dbgis.menlhk.go.id/supabase-proxy/api/ADM_KAB_KOTA?WADMPR=eq.Bali"  ### Contoh Query

from urllib.parse import quote

pilih = "Bali"
filter_query = f"ilike.{pilih}%"
encoded_query = quote(filter_query, safe='')
url = f"https://dbgis.menlhk.go.id/supabase-proxy/api/ADM_KAB_KOTA?WADMPR={encoded_query}"

headers = {}

# === Ambil data dari Supabase ===
response = requests.get(url, headers=headers, verify=False)
if response.status_code != 200:
    raise Exception(f"Gagal ambil data dari API: {response.status_code} - {response.text}")

data = response.json()

# === Konversi ke GeoJSON FeatureCollection ===
geojson = {
    "type": "FeatureCollection",
    "features": []
}

for row in data:
    # Pastikan nama field sesuai dengan data asli dari API
    geom = row.get("geometry") or row.get("geom")  # bisa salah satu tergantung API

    if isinstance(geom, str):
        try:
            geom = json.loads(geom)  # Parse string JSON ke Python dict
        except Exception as e:
            print("❌ Gagal parsing geometry:", e)
            continue

    if not isinstance(geom, dict) or "type" not in geom or "coordinates" not in geom:
        print("❌ Geometry tidak valid:", geom)
        continue

    feature = {
        "type": "Feature",
        "geometry": geom,
        "properties": {k: v for k, v in row.items() if k not in ["geom", "geometry"]}
    }
    geojson["features"].append(feature)

# === Simpan ke file GeoJSON sementara ===
geojson_path = os.path.join(os.path.expanduser("~"), "data_supabase.geojson")
with open(geojson_path, "w") as f:
    json.dump(geojson, f)

# === Tambahkan ke QGIS ===
#layer = QgsVectorLayer(geojson_path, "ADM_KAB_KOTA", "ogr")
layer_name = "ADM_KAB_KOTA"
if geojson["features"]:
    nama_pilih = geojson["features"][0]["properties"].get("WADMPR")
    if nama_kabkota:
        layer_name += f" - {nama_pilih}"

layer = QgsVectorLayer(geojson_path, layer_name, "ogr")

if not layer.isValid():
    raise Exception("❌ Layer tidak valid. Cek struktur GeoJSON dan geometri.")

QgsProject.instance().addMapLayer(layer)
print("✅ Layer berhasil ditambahkan ke QGIS!")


