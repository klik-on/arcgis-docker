-- Contoh TYPE Data geometry
import requests
import json
import os
from qgis.core import QgsVectorLayer, QgsProject

# === Konfigurasi ===
url = "http://172.16.2.122:8000/rest/v1/AMDAL_AR_50K?select=*"

headers = {
    "apikey": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlIiwiaWF0IjoxNzUxMzAyODAwLCJleHAiOjE5MDkwNjkyMDB9.5B3KqroqKZUnXyjJg99AtjSjGci-wKqJtH7LWCz7x2U",  # potong demi keamanan
    "Authorization": Bearer "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlIiwiaWF0IjoxNzUxMzAyODAwLCJleHAiOjE5MDkwNjkyMDB9.5B3KqroqKZUnXyjJg99AtjSjGci-wKqJtH7LWCz7x2U"
}

# === Ambil data dari Supabase ===
response = requests.get(url, headers=headers)
if response.status_code != 200:
    raise Exception(f"Gagal ambil data dari API: {response.status_code} - {response.text}")

data = response.json()

# === Konversi ke GeoJSON FeatureCollection ===
geojson = {
    "type": "FeatureCollection",
    "features": []
}

for row in data:
    geom = row.get("geometry")  # ganti kalau nama kolom berbeda, misalnya 'st_asgeojson'
    if isinstance(geom, str):
        try:
            geom = json.loads(geom)  # parse string ke dict
        except Exception as e:
            print("❌ Gagal parsing geometry:", e)
            continue

    if not isinstance(geom, dict) or "type" not in geom or "coordinates" not in geom:
        print("❌ Geometry tidak valid:", geom)
        continue

    # Buat feature GeoJSON
    feature = {
        "type": "Feature",
        "geometry": geom,  # bisa MultiPolygon, Polygon, dsb
        "properties": {k: v for k, v in row.items() if k != "geometry"}
    }
    geojson["features"].append(feature)

# === Simpan ke file sementara ===
geojson_path = os.path.join(os.path.expanduser("~"), "qgis_supabase.geojson")
with open(geojson_path, "w") as f:
    json.dump(geojson, f)

# === Tambahkan ke QGIS ===
layer = QgsVectorLayer(geojson_path, "AMDAL_AR_50K Supabase", "ogr")
if not layer.isValid():
    raise Exception("❌ Layer tidak valid. Cek struktur GeoJSON dan geometri.")

QgsProject.instance().addMapLayer(layer)
print("✅ Layer MultiPolygon berhasil ditambahkan ke QGIS!")



-- Contoh TYPE Data geom
import requests
import json
import os
from qgis.core import QgsVectorLayer, QgsProject

# === Konfigurasi ===
url = "http://172.16.2.122:8000/rest/v1/RUMPIN?select=*"

headers = {
    "apikey": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlIiwiaWF0IjoxNzUxMzAyODAwLCJleHAiOjE5MDkwNjkyMDB9.5B3KqroqKZUnXyjJg99AtjSjGci-wKqJtH7LWCz7x2U",  # potong demi keamanan
    "Authorization": Bearer "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlIiwiaWF0IjoxNzUxMzAyODAwLCJleHAiOjE5MDkwNjkyMDB9.5B3KqroqKZUnXyjJg99AtjSjGci-wKqJtH7LWCz7x2U"
}

# === Ambil data dari Supabase ===
response = requests.get(url, headers=headers)
if response.status_code != 200:
    raise Exception(f"Gagal ambil data dari API: {response.status_code} - {response.text}")

data = response.json()

# === Konversi ke GeoJSON FeatureCollection ===
geojson = {
    "type": "FeatureCollection",
    "features": []
}

for row in data:
    geom = row.get("geom")  # ganti kalau nama kolom berbeda, misalnya 'st_asgeojson'
    if isinstance(geom, str):
        try:
            geom = json.loads(geom)  # parse string ke dict
        except Exception as e:
            print("❌ Gagal parsing geometry:", e)
            continue

    if not isinstance(geom, dict) or "type" not in geom or "coordinates" not in geom:
        print("❌ Geometry tidak valid:", geom)
        continue

    # Buat feature GeoJSON
    feature = {
        "type": "Feature",
        "geometry": geom,  # bisa MultiPolygon, Polygon, dsb
        "properties": {k: v for k, v in row.items() if k != "geometry"}
    }
    geojson["features"].append(feature)

# === Simpan ke file sementara ===
geojson_path = os.path.join(os.path.expanduser("~"), "rumpin_supabase.geojson")
with open(geojson_path, "w") as f:
    json.dump(geojson, f)

# === Tambahkan ke QGIS ===
layer = QgsVectorLayer(geojson_path, "RUMPIN Supabase", "ogr")
if not layer.isValid():
    raise Exception("❌ Layer tidak valid. Cek struktur GeoJSON dan geometri.")

QgsProject.instance().addMapLayer(layer)
print("✅ Layer MultiPolygon berhasil ditambahkan ke QGIS!")


#--- Proxy
import urllib3
import json
import os
from qgis.core import (
    QgsVectorLayer,
    QgsProject,
    QgsCoordinateReferenceSystem
)

# === Konfigurasi ===
IGT = "AMDAL_AR_50K"
url = f"https://dbgis.menlhk.go.id/supabase-proxy/api/{IGT}?select=*"
geojson_path = "C:/app/data/data_supabase.geojson"  # Ganti sesuai kebutuhan
os.makedirs(os.path.dirname(geojson_path), exist_ok=True)

# === Inisialisasi urllib3 PoolManager (tanpa verifikasi sertifikat SSL) ===
http = urllib3.PoolManager(cert_reqs='CERT_NONE')
response = http.request("GET", url)

# === Parse response ===
try:
    data = json.loads(response.data.decode("utf-8"))
except Exception as e:
    raise Exception(f"❌ Gagal parsing response: {e}")

# === Konversi ke GeoJSON FeatureCollection ===
geojson = {
    "type": "FeatureCollection",
    "features": []
}

for row in data:
    geom = row.get("geometry") or row.get("geom")
    if isinstance(geom, str):
        try:
            geom = json.loads(geom)
        except Exception as e:
            print("❌ Gagal parsing geometry:", e)
            continue

    if not isinstance(geom, dict) or "type" not in geom or "coordinates" not in geom:
        print("❌ Geometry tidak valid, dilewati:", geom)
        continue

    feature = {
        "type": "Feature",
        "geometry": geom,
        "properties": {k: v for k, v in row.items() if k not in ["geom", "geometry"]}
    }
    geojson["features"].append(feature)

# === Cek jika kosong ===
if not geojson["features"]:
    print("⚠️ Tidak ada fitur ditemukan. Proses dihentikan.")
    exit()

# === Simpan GeoJSON ke file ===
with open(geojson_path, "w", encoding="utf-8") as f:
    json.dump(geojson, f, ensure_ascii=False, indent=2)

print(f"✅ GeoJSON disimpan di: {geojson_path}")

# === Tambahkan ke QGIS ===
layer = QgsVectorLayer(geojson_path, IGT, "ogr")
layer.setCrs(QgsCoordinateReferenceSystem("EPSG:4326"))

if not layer.isValid():
    raise Exception("❌ Layer '{IGT}' tidak valid. Cek struktur GeoJSON dan geometri.")

QgsProject.instance().addMapLayer(layer)
print(f"✅ Layer '{IGT}' berhasil ditambahkan ke QGIS! Jumlah fitur: {layer.featureCount()}")


-- Query Menggunakan PILIHAN
import urllib3
import json
import os
from qgis.core import (
    QgsVectorLayer,
    QgsProject,
    QgsCoordinateReferenceSystem
)

# === Konfigurasi ===
IGT = "ADM_KAB_KOTA"
url = f"https://dbgis.menlhk.go.id/supabase-proxy/api/{IGT}?WADMPR=eq.Bali"
geojson_path = "C:/app/data/data_supabase.geojson"  # Ganti sesuai kebutuhan
os.makedirs(os.path.dirname(geojson_path), exist_ok=True)

# === Inisialisasi urllib3 PoolManager (tanpa verifikasi sertifikat SSL) ===
http = urllib3.PoolManager(cert_reqs='CERT_NONE')
response = http.request("GET", url)

# === Parse response ===
try:
    data = json.loads(response.data.decode("utf-8"))
except Exception as e:
    raise Exception(f"❌ Gagal parsing response: {e}")

# === Konversi ke GeoJSON FeatureCollection ===
geojson = {
    "type": "FeatureCollection",
    "features": []
}

for row in data:
    geom = row.get("geometry") or row.get("geom")
    if isinstance(geom, str):
        try:
            geom = json.loads(geom)
        except Exception as e:
            print("❌ Gagal parsing geometry:", e)
            continue

    if not isinstance(geom, dict) or "type" not in geom or "coordinates" not in geom:
        print("❌ Geometry tidak valid, dilewati:", geom)
        continue

    feature = {
        "type": "Feature",
        "geometry": geom,
        "properties": {k: v for k, v in row.items() if k not in ["geom", "geometry"]}
    }
    geojson["features"].append(feature)

# === Cek jika kosong ===
if not geojson["features"]:
    print("⚠️ Tidak ada fitur ditemukan. Proses dihentikan.")
    exit()

# === Simpan GeoJSON ke file ===
with open(geojson_path, "w", encoding="utf-8") as f:
    json.dump(geojson, f, ensure_ascii=False, indent=2)

print(f"✅ GeoJSON disimpan di: {geojson_path}")

# === Tambahkan ke QGIS ===
layer = QgsVectorLayer(geojson_path, IGT, "ogr")
layer.setCrs(QgsCoordinateReferenceSystem("EPSG:4326"))

if not layer.isValid():
    raise Exception("❌ Layer '{IGT}' tidak valid. Cek struktur GeoJSON dan geometri.")

QgsProject.instance().addMapLayer(layer)
print(f"✅ Layer '{IGT}' berhasil ditambahkan ke QGIS! Jumlah fitur: {layer.featureCount()}")


