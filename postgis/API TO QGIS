-- Contoh Query Menggunakan ILIKE
import os
import json
import urllib3
from urllib.parse import quote
from qgis.core import (
    QgsVectorLayer,
    QgsProject,
    QgsCoordinateReferenceSystem
)

def load_supabase_layer(IGT, filter_column=None, filter_value=None):
    # === Setup URL dan direktori penyimpanan ===
    base_url = f"https://dbgis.menlhk.go.id/supabase-proxy/api/{IGT}"
    
    # Gunakan filter ilike jika tersedia
    if filter_column and filter_value:
        filter_encoded = quote(f"*{filter_value}*")
        url = f"{base_url}?{filter_column}=ilike.{filter_encoded}"
    else:
        url = base_url

    print(f"üì° Mengambil data dari: {url}")

    # Siapkan path untuk menyimpan GeoJSON
    geojson_path = f"C:/app/data/data_supabase_{IGT}.geojson"
    os.makedirs(os.path.dirname(geojson_path), exist_ok=True)

    # === Request HTTP (non-SSL verification) ===
    http = urllib3.PoolManager(cert_reqs='CERT_NONE')
    response = http.request("GET", url)

    try:
        data = json.loads(response.data.decode("utf-8"))
    except Exception as e:
        raise Exception(f"‚ùå Gagal parsing response JSON: {e}")

    # === Konversi ke GeoJSON FeatureCollection ===
    geojson = {
        "type": "FeatureCollection",
        "features": []
    }

    for row in data:
        geom = row.get("geometry") or row.get("geom")
        if isinstance(geom, str):
            try:
                geom = json.loads(geom)
            except Exception as e:
                print("‚ùå Gagal parsing geometry:", e)
                continue

        if not isinstance(geom, dict) or "type" not in geom or "coordinates" not in geom:
            print("‚ùå Geometry tidak valid, dilewati:", geom)
            continue

        feature = {
            "type": "Feature",
            "geometry": geom,
            "properties": {k: v for k, v in row.items() if k not in ["geom", "geometry"]}
        }
        geojson["features"].append(feature)

    if not geojson["features"]:
        print("‚ö†Ô∏è Tidak ada fitur ditemukan. Proses dihentikan.")
        return

    # === Simpan ke file GeoJSON ===
    with open(geojson_path, "w", encoding="utf-8") as f:
        json.dump(geojson, f, ensure_ascii=False, indent=2)

    print(f"‚úÖ GeoJSON disimpan di: {geojson_path}")

    # === Load ke QGIS ===
    layer = QgsVectorLayer(geojson_path, IGT, "ogr")
    layer.setCrs(QgsCoordinateReferenceSystem("EPSG:4326"))

    if not layer.isValid():
        raise Exception(f"‚ùå Layer '{IGT}' tidak valid. Cek struktur GeoJSON.")

    QgsProject.instance().addMapLayer(layer)
    print(f"‚úÖ Layer '{IGT}' berhasil ditambahkan ke QGIS! Jumlah fitur: {layer.featureCount()}")

# ================================
# üß™ Contoh pemanggilan fungsi:
# ================================
load_supabase_layer("ADM_KAB_KOTA", filter_column="WADMPR", filter_value="Banten")

# Kamu bisa panggil untuk layer lainnya juga:
# load_supabase_layer("AMDAL_AR_50K", filter_column="WADMPR", filter_value="Jawa Barat")
# load_supabase_layer("TUTUPAN_AR_50K")



-- Contoh TYPE Data geometry
import requests
import json
import os
from qgis.core import QgsVectorLayer, QgsProject

# === Konfigurasi ===
url = "http://172.16.2.122:8000/rest/v1/AMDAL_AR_50K?select=*"

headers = {
    "apikey": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlIiwiaWF0IjoxNzUxMzAyODAwLCJleHAiOjE5MDkwNjkyMDB9.5B3KqroqKZUnXyjJg99AtjSjGci-wKqJtH7LWCz7x2U",  # potong demi keamanan
    "Authorization": Bearer "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlIiwiaWF0IjoxNzUxMzAyODAwLCJleHAiOjE5MDkwNjkyMDB9.5B3KqroqKZUnXyjJg99AtjSjGci-wKqJtH7LWCz7x2U"
}

# === Ambil data dari Supabase ===
response = requests.get(url, headers=headers)
if response.status_code != 200:
    raise Exception(f"Gagal ambil data dari API: {response.status_code} - {response.text}")

data = response.json()

# === Konversi ke GeoJSON FeatureCollection ===
geojson = {
    "type": "FeatureCollection",
    "features": []
}

for row in data:
    geom = row.get("geometry")  # ganti kalau nama kolom berbeda, misalnya 'st_asgeojson'
    if isinstance(geom, str):
        try:
            geom = json.loads(geom)  # parse string ke dict
        except Exception as e:
            print("‚ùå Gagal parsing geometry:", e)
            continue

    if not isinstance(geom, dict) or "type" not in geom or "coordinates" not in geom:
        print("‚ùå Geometry tidak valid:", geom)
        continue

    # Buat feature GeoJSON
    feature = {
        "type": "Feature",
        "geometry": geom,  # bisa MultiPolygon, Polygon, dsb
        "properties": {k: v for k, v in row.items() if k != "geometry"}
    }
    geojson["features"].append(feature)

# === Simpan ke file sementara ===
geojson_path = os.path.join(os.path.expanduser("~"), "qgis_supabase.geojson")
with open(geojson_path, "w") as f:
    json.dump(geojson, f)

# === Tambahkan ke QGIS ===
layer = QgsVectorLayer(geojson_path, "AMDAL_AR_50K Supabase", "ogr")
if not layer.isValid():
    raise Exception("‚ùå Layer tidak valid. Cek struktur GeoJSON dan geometri.")

QgsProject.instance().addMapLayer(layer)
print("‚úÖ Layer MultiPolygon berhasil ditambahkan ke QGIS!")



-- Contoh TYPE Data geom
import requests
import json
import os
from qgis.core import QgsVectorLayer, QgsProject

# === Konfigurasi ===
url = "http://172.16.2.122:8000/rest/v1/RUMPIN?select=*"

headers = {
    "apikey": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlIiwiaWF0IjoxNzUxMzAyODAwLCJleHAiOjE5MDkwNjkyMDB9.5B3KqroqKZUnXyjJg99AtjSjGci-wKqJtH7LWCz7x2U",  # potong demi keamanan
    "Authorization": Bearer "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlIiwiaWF0IjoxNzUxMzAyODAwLCJleHAiOjE5MDkwNjkyMDB9.5B3KqroqKZUnXyjJg99AtjSjGci-wKqJtH7LWCz7x2U"
}

# === Ambil data dari Supabase ===
response = requests.get(url, headers=headers)
if response.status_code != 200:
    raise Exception(f"Gagal ambil data dari API: {response.status_code} - {response.text}")

data = response.json()

# === Konversi ke GeoJSON FeatureCollection ===
geojson = {
    "type": "FeatureCollection",
    "features": []
}

for row in data:
    geom = row.get("geom")  # ganti kalau nama kolom berbeda, misalnya 'st_asgeojson'
    if isinstance(geom, str):
        try:
            geom = json.loads(geom)  # parse string ke dict
        except Exception as e:
            print("‚ùå Gagal parsing geometry:", e)
            continue

    if not isinstance(geom, dict) or "type" not in geom or "coordinates" not in geom:
        print("‚ùå Geometry tidak valid:", geom)
        continue

    # Buat feature GeoJSON
    feature = {
        "type": "Feature",
        "geometry": geom,  # bisa MultiPolygon, Polygon, dsb
        "properties": {k: v for k, v in row.items() if k != "geometry"}
    }
    geojson["features"].append(feature)

# === Simpan ke file sementara ===
geojson_path = os.path.join(os.path.expanduser("~"), "rumpin_supabase.geojson")
with open(geojson_path, "w") as f:
    json.dump(geojson, f)

# === Tambahkan ke QGIS ===
layer = QgsVectorLayer(geojson_path, "RUMPIN Supabase", "ogr")
if not layer.isValid():
    raise Exception("‚ùå Layer tidak valid. Cek struktur GeoJSON dan geometri.")

QgsProject.instance().addMapLayer(layer)
print("‚úÖ Layer MultiPolygon berhasil ditambahkan ke QGIS!")


#--- Proxy
import urllib3
import json
import os
from qgis.core import (
    QgsVectorLayer,
    QgsProject,
    QgsCoordinateReferenceSystem
)

# === Konfigurasi ===
IGT = "AMDAL_AR_50K"
url = f"https://dbgis.menlhk.go.id/supabase-proxy/api/{IGT}?select=*"
geojson_path = "C:/app/data/data_supabase.geojson"  # Ganti sesuai kebutuhan
os.makedirs(os.path.dirname(geojson_path), exist_ok=True)

# === Inisialisasi urllib3 PoolManager (tanpa verifikasi sertifikat SSL) ===
http = urllib3.PoolManager(cert_reqs='CERT_NONE')
response = http.request("GET", url)

# === Parse response ===
try:
    data = json.loads(response.data.decode("utf-8"))
except Exception as e:
    raise Exception(f"‚ùå Gagal parsing response: {e}")

# === Konversi ke GeoJSON FeatureCollection ===
geojson = {
    "type": "FeatureCollection",
    "features": []
}

for row in data:
    geom = row.get("geometry") or row.get("geom")
    if isinstance(geom, str):
        try:
            geom = json.loads(geom)
        except Exception as e:
            print("‚ùå Gagal parsing geometry:", e)
            continue

    if not isinstance(geom, dict) or "type" not in geom or "coordinates" not in geom:
        print("‚ùå Geometry tidak valid, dilewati:", geom)
        continue

    feature = {
        "type": "Feature",
        "geometry": geom,
        "properties": {k: v for k, v in row.items() if k not in ["geom", "geometry"]}
    }
    geojson["features"].append(feature)

# === Cek jika kosong ===
if not geojson["features"]:
    print("‚ö†Ô∏è Tidak ada fitur ditemukan. Proses dihentikan.")
    exit()

# === Simpan GeoJSON ke file ===
with open(geojson_path, "w", encoding="utf-8") as f:
    json.dump(geojson, f, ensure_ascii=False, indent=2)

print(f"‚úÖ GeoJSON disimpan di: {geojson_path}")

# === Tambahkan ke QGIS ===
layer = QgsVectorLayer(geojson_path, IGT, "ogr")
layer.setCrs(QgsCoordinateReferenceSystem("EPSG:4326"))

if not layer.isValid():
    raise Exception("‚ùå Layer '{IGT}' tidak valid. Cek struktur GeoJSON dan geometri.")

QgsProject.instance().addMapLayer(layer)
print(f"‚úÖ Layer '{IGT}' berhasil ditambahkan ke QGIS! Jumlah fitur: {layer.featureCount()}")


-- Contoh Query QGIS Menggunakan PILIHAN
import urllib3
import json
import os
import sys
from qgis.core import (
    QgsVectorLayer,
    QgsProject,
    QgsCoordinateReferenceSystem
)

# === Konfigurasi ===
IGT = "ADM_KAB_KOTA"  # Nama tabel layer
DEFAULT_KONDISI = "WADMPR=eq.Bali"  # Default filter

# Gunakan argumen dari CLI jika ada
KONDISI = sys.argv[1] if len(sys.argv) > 1 else DEFAULT_KONDISI
print(f"‚ÑπÔ∏è Menggunakan filter: {KONDISI}")

# URL endpoint API Supabase
BASE_URL = "https://dbgis.menlhk.go.id"
ENDPOINT = f"{BASE_URL}/supabase/api/{IGT}?{KONDISI}"

# Lokasi penyimpanan GeoJSON
geojson_path = "C:/app/data/data_supabase.geojson"
os.makedirs(os.path.dirname(geojson_path), exist_ok=True)

# Cek jika file sudah ada
if os.path.exists(geojson_path):
    print(f"‚ö†Ô∏è File sudah ada dan akan ditimpa: {geojson_path}")

# === HTTP Request ===
http = urllib3.PoolManager(cert_reqs='CERT_NONE')
response = http.request("GET", ENDPOINT)

if response.status != 200:
    # Coba fallback ke supabase-proxy
    print(f"‚ö†Ô∏è Gagal ambil dari {ENDPOINT}, mencoba fallback ke supabase-proxy...")
    ENDPOINT = f"{BASE_URL}/supabase-proxy/api/{IGT}?{KONDISI}"
    response = http.request("GET", ENDPOINT)

    if response.status != 200:
        raise Exception(f"‚ùå Gagal mengambil data dari API. Status: {response.status}")

print(f"‚úÖ Data berhasil diambil dari: {ENDPOINT}")

# === Parsing JSON Response ===
try:
    data = json.loads(response.data.decode("utf-8"))
except Exception as e:
    raise Exception(f"‚ùå Gagal parsing JSON: {e}")

# === Konversi ke GeoJSON FeatureCollection ===
features = []
for row in data:
    geom = row.get("geom") or row.get("geometry")
    if isinstance(geom, str):
        try:
            geom = json.loads(geom)
        except Exception as e:
            print("‚ùå Gagal parsing geometry:", e)
            continue

    if not isinstance(geom, dict) or "type" not in geom or "coordinates" not in geom:
        print("‚ö†Ô∏è Geometry tidak valid, dilewati:", geom)
        continue

    feature = {
        "type": "Feature",
        "geometry": geom,
        "properties": {k: v for k, v in row.items() if k not in ["geom", "geometry"]}
    }
    features.append(feature)

if not features:
    print("‚ö†Ô∏è Tidak ada fitur ditemukan. Proses dihentikan.")
    exit()

geojson = {
    "type": "FeatureCollection",
    "features": features
}

# === Simpan GeoJSON ke file ===
with open(geojson_path, "w", encoding="utf-8") as f:
    json.dump(geojson, f, ensure_ascii=False, indent=2)

print(f"‚úÖ GeoJSON berhasil disimpan di: {geojson_path}")
print(f"‚ÑπÔ∏è Jumlah fitur: {len(features)}")

# === Tambahkan ke QGIS ===
layer = QgsVectorLayer(geojson_path, IGT, "ogr")
layer.setCrs(QgsCoordinateReferenceSystem("EPSG:4326"))

if not layer.isValid():
    raise Exception(f"‚ùå Layer '{IGT}' tidak valid. Cek struktur GeoJSON dan geometri.")

QgsProject.instance().addMapLayer(layer)
print(f"‚úÖ Layer '{IGT}' berhasil ditambahkan ke QGIS! Jumlah fitur: {layer.featureCount()}")
