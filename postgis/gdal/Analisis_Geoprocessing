-- Dissolve
-- 1. Hapus tabel jika sudah ada
DROP TABLE IF EXISTS datagis.adm_provinsi_clean;

-- 2. Buat tabel hasil union kabupaten/kota per provinsi
CREATE TABLE datagis.adm_provinsi_clean AS
SELECT
  "WADMPR" AS nama_provinsi,
  "kdppum" AS kode_provinsi,
  ST_Multi(
    ST_Union(
      ST_MakeValid(
        CASE 
          WHEN ST_SRID(geom) != 4326 THEN ST_Transform(geom, 4326)
          ELSE geom
        END
      )
    )
  )::geometry(MultiPolygon, 4326) AS geom
FROM datagis."ADM_KAB_KOTA"
GROUP BY "WADMPR", "kdppum";

-- 3. Tambahkan primary key pada kode_provinsi
ALTER TABLE datagis.adm_provinsi_clean
  ADD CONSTRAINT adm_provinsi_clean_pkey PRIMARY KEY (kode_provinsi);

-- 4. Buat index spasial dengan nama sesuai konvensi
CREATE INDEX adm_provinsi_clean_geom_idx
  ON datagis.adm_provinsi_clean USING GIST (geom);


-- (Opsional) Validasi geometri hasil
SELECT
  nama_provinsi,
  ST_IsValid(geom) AS is_valid,
  ST_IsValidReason(geom) AS reason_if_not_valid
FROM datagis.adm_provinsi_clean
WHERE NOT ST_IsValid(geom);

-- Cek Penggunaan Index
EXPLAIN
SELECT * 
FROM datagis.adm_provinsi_clean
WHERE ST_Intersects(
  geom,
  ST_GeomFromText('POLYGON((115.0 -8.5, 115.2 -8.5, 115.2 -8.3, 115.0 -8.3, 115.0 -8.5))', 4326)
);

### Export ke OpenfileGDB Shell Script (export_gdb.sh)
#!/bin/bash

# === Variabel Koneksi PostgreSQL ===
PG_HOST=localhost
PG_PORT=5432
PG_DB=mygisdb
PG_USER=postgres
PG_PASS=secret

# === Variabel Layer & Output ===
PG_SCHEMA=datagis
LAYER_NAME=adm_provinsi_clean
DATA_DIR="$(pwd)"  # Ubah ke direktori output yang diinginkan
OUTPUT_GDB="${DATA_DIR}/${LAYER_NAME}.gdb"

# === Ekspor layer dari PostgreSQL ke OpenFileGDB ===
echo "ðŸš€ Mengekspor layer ${LAYER_NAME} ke OpenFileGDB..."
PGPASSWORD="${PG_PASS}" ogr2ogr -f "OpenFileGDB" \
  "${OUTPUT_GDB}" \
  PG:"host=${PG_HOST} port=${PG_PORT} dbname=${PG_DB} user=${PG_USER}" \
  ${PG_SCHEMA}."${LAYER_NAME}" \
  -nln "${LAYER_NAME}" \
  -dim 2 \
  -t_srs EPSG:4326 \
  -overwrite \
  -progress \
  -lco LAUNDER=NO \
  --config OGR_OPENFILEGDB_METHOD SKIP \
  --config OGR_ENABLE_CURVE_REDUCTION YES \
  --config OGR_FORCE_GML_MULTISURFACE_AS_MULTIPOLYGON YES \
  --config OGR_ORGANIZE_POLYGONS SKIP

# === Kompres output ke ZIP ===
echo "ðŸ“¦ Mengarsipkan ${LAYER_NAME}.gdb ke ZIP..."
pushd "$DATA_DIR" > /dev/null
zip -r "${LAYER_NAME}.gdb.zip" "${LAYER_NAME}.gdb" > /dev/null
popd > /dev/null

# === Hapus folder GDB setelah ZIP ===
echo "ðŸ§¹ Menghapus folder ${LAYER_NAME}.gdb setelah kompresi..."
rm -rf "${OUTPUT_GDB}"

echo "âœ… Selesai. File ZIP tersedia di: ${DATA_DIR}/${LAYER_NAME}.gdb.zip"



-- Intersection 2 Tema Kawasan + Administrasi
CREATE TABLE datagis."Fungsi_Kawasan_DKI_Jakarta_Geom" AS
SELECT
  c."NOURUT_KWS" AS "ID_KAWASAN",
  a."FUNGSIKWS" AS "KODE_KAWASAN",
  b."WADMPR" AS "PROVINSI",
  c."FUNGSI_KWS" AS "NAMA_FUNGSI_KAWASAN",
  ST_Multi(
    ST_CollectionExtract(
      ST_Intersection(a.geom, b.geom),
      3
    )
  ) AS geom,
  ST_Area(ST_Transform(ST_Intersection(a.geom, b.geom), 54034)) / 10000 AS "LUAS_CEA_HEKTAR"
FROM 
  datagis."KWSHUTAN_AR_250K" a
INNER JOIN 
  datagis."ADM_KAB_KOTA" b 
  ON ST_Intersects(a.geom, b.geom)
LEFT JOIN 
  kodefikasi."KODE_KWS" c 
  ON a."FUNGSIKWS" = c."KD_KWS"
WHERE 
  ST_IsValid(a.geom) 
  AND ST_IsValid(b.geom)
  AND b."WADMPR" = 'DKI Jakarta'
  AND NOT ST_IsEmpty(a.geom)
  AND NOT ST_IsEmpty(b.geom);

-- Buat index spasial
CREATE INDEX ON datagis."Fungsi_Kawasan_DKI_Jakarta_Geom" USING GIST (geom);

-- Intersection 3 Tema
-- Intersection 3 Tema
-- 1. Drop dan Buat ulang tabel dengan tipe MULTIPOLYGON dan kolom LUAS_HA
DROP TABLE IF EXISTS datagis."Luas_Penutupan_Lahan_Provinsi_Kawasan";
CREATE TABLE datagis."Luas_Penutupan_Lahan_Provinsi_Kawasan" (
  "NOURUT_PL" INT,
  "KODEPL" TEXT,
  "WADMPR" TEXT,
  "DESKRIPSI_PL" TEXT,
  "NOURUT_KWS" INT,
  "KODEKWS" TEXT,
  "FUNGSI_KWS" TEXT,
  "geom" GEOMETRY(MULTIPOLYGON, 4326),
  "LUAS_HA" NUMERIC
);
COMMENT ON TABLE datagis."Luas_Penutupan_Lahan_Provinsi_Kawasan" IS 'Hasil overlay Penutupan Lahan, Administrasi, dan Kawasan Hutan dengan luas dalam hektar';

-- 2. Menggunakan CTE untuk menyimpan hasil intersection dan menghitung luas
WITH geom_intersection AS (
  SELECT
    c."NOURUT_PL",
    a."pl2024_id" AS "KODEPL",
    b."WADMPR",
    c."DESKRIPSI_PL",
    e."NOURUT_KWS",
    d."FUNGSIKWS" AS "KODEKWS",
    e."FUNGSI_KWS",
    
    -- Simpan hasil intersection sebagai MULTIPOLYGON
    ST_Multi(
      ST_CollectionExtract(
        ST_Intersection(
          a.geom,
          ST_Intersection(b.geom, d.geom)
        ), 3
      )
    ) AS geom

  FROM 
    datagis."PL2024_AR_250K" a
  INNER JOIN 
    datagis."ADM_KAB_KOTA" b ON ST_Intersects(a.geom, b.geom)
  INNER JOIN 
    datagis."KWSHUTAN_AR_250K" d ON ST_Intersects(a.geom, d.geom)
  LEFT JOIN 
    kodefikasi."KODE_PL" c ON a."pl2024_id" = c."KD_PL"
  LEFT JOIN 
    kodefikasi."KODE_KWS" e ON d."FUNGSIKWS" = e."KD_KWS"
  WHERE 
    -- Untuk filter wilayah tertentu
    -- b."WADMPR" IN ('DKI Jakarta', 'Jawa Barat', 'Banten')
    b."WADMPR" = 'DKI Jakarta'
    AND a.geom && b.geom
    AND a.geom && d.geom
),
luas_per_provinsi AS (
  SELECT 
    "NOURUT_PL",
    "KODEPL",
    "WADMPR",
    "DESKRIPSI_PL",
    "NOURUT_KWS",
    "KODEKWS",
    "FUNGSI_KWS",
    geom,
    
    -- Hitung luas dalam hektar (transformasi ke SRID 54034)
    ST_Area(ST_Transform(geom, 54034)) / 10000 AS LUAS_HA
  FROM geom_intersection
  WHERE geom IS NOT NULL AND NOT ST_IsEmpty(geom) AND ST_IsValid(geom)
)

-- 3. Insert hasil ke tabel output
INSERT INTO datagis."Luas_Penutupan_Lahan_Provinsi_Kawasan" (
  "NOURUT_PL", 
  "KODEPL", 
  "WADMPR", 
  "DESKRIPSI_PL", 
  "NOURUT_KWS", 
  "KODEKWS", 
  "FUNGSI_KWS", 
  "geom",
  "LUAS_HA"
)
SELECT 
  "NOURUT_PL", 
  "KODEPL", 
  "WADMPR", 
  "DESKRIPSI_PL", 
  "NOURUT_KWS", 
  "KODEKWS", 
  "FUNGSI_KWS", 
  geom,
  LUAS_HA
FROM luas_per_provinsi;

-- 4. Buat index GIST untuk kolom geom
CREATE INDEX ON datagis."Luas_Penutupan_Lahan_Provinsi_Kawasan" USING GIST (geom);

-- 5. Verifikasi data yang telah disimpan
SELECT * FROM datagis."Luas_Penutupan_Lahan_Provinsi_Kawasan" LIMIT 10;
